{"version":3,"sources":["types/types.ts","components/Keyboard/Key.tsx","Utils.ts","components/Keyboard/Keyboard.tsx","components/Synthesizer.tsx","App.tsx","services/AudioService.ts","serviceWorker.ts","index.tsx"],"names":["KeyType","getKeyColor","keyType","isPressed","WHITE","Key","props","position","note","onKeyPressed","onKeyReleased","stroke","fill","x","y","width","height","onMouseDown","onMouseUp","isAcceptedComputerKey","computerKey","config","computerKeyMappings","map","key","includes","getMatchingNote","foundKey","find","compKey","Keyboard","state","activeNotes","handleComputerKeyPressed","bind","handleComputerKeyReleased","window","addEventListener","this","updateActiveNotes","audioService","playNote","releaseNote","event","playedNote","noteIsActive","releasedNote","isActive","setState","undefined","id","keyboardKeys","type","transform","React","Component","Synthesizer","viewBox","version","xmlns","AudioServiceContext","Consumer","audioContext","noteOscillators","gain","oscillatorWaveType","AudioContext","webkitAudioContext","createGain","value","connect","destination","Map","noteFrequency","noteFrequencyMappings","filter","m","frequency","oscillator","createOscillator","start","set","get","disconnect","forEach","createContext","App","className","Provider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.292c1899.chunk.js","sourcesContent":["\nexport interface KeyboardKey {\n  note: string;\n  position: number;\n  type: KeyType;\n}\n\nexport enum KeyType {\n  BLACK = 'BLACK',\n  WHITE = 'WHITE',\n}\n\nexport interface ComputerKeyMapping {\n  key: string;\n  keyCode: number;\n  note: string;\n}\n\nexport interface NoteFrequencyMapping {\n  note: string;\n  frequency: number;\n}","import React from 'react';\nimport {KeyType} from '../../types/types'\n\ninterface KeyProps {\n  note: string;\n  keyType: KeyType;\n  position: number;\n  isPressed: boolean;\n\n  onKeyPressed: (note: string) => void;\n  onKeyReleased: (note: string) => void;\n}\n\nconst getKeyColor = (keyType: KeyType, isPressed: boolean): string => {\n  if (keyType === KeyType.WHITE) {\n    return isPressed\n      ? '#f7f7f7'\n      : '#FFFFF7';\n  } else {\n    return isPressed\n      ? 'black'\n      : '#4B4B4B';\n  }\n};\n\nconst Key: React.FC<KeyProps> = (props: KeyProps) => {\n  const {keyType, position, isPressed, note, onKeyPressed, onKeyReleased} = props;\n  return (\n    <svg>\n      <rect\n        stroke={keyType === KeyType.WHITE ? '#555555' : '#979797'}\n        fill={getKeyColor(keyType, isPressed)}\n        x={position}\n        y={0}\n        width={keyType === KeyType.WHITE ? 80 : 40}\n        height={keyType === KeyType.WHITE ? 400 : 280}\n        onMouseDown={() => onKeyPressed(note)}\n        onMouseUp={() => onKeyReleased(note)}>\n      </rect>\n    </svg>\n  );\n};\n\nexport default Key;\n","import config from './app-config.json';\nimport {ComputerKeyMapping} from \"./types/types\";\n\n\nexport const isAcceptedComputerKey = (computerKey: string) => {\n  return (config.computerKeyMappings as ComputerKeyMapping[])\n    .map(key => key.key).includes(computerKey);\n};\n\nexport const getMatchingNote = (computerKey: string): string => {\n  const foundKey = (config.computerKeyMappings as ComputerKeyMapping[])\n    .find(compKey => compKey.key === computerKey);\n  return foundKey ? foundKey.note : '';\n};\n","import React from 'react';\nimport Key from \"./Key\";\nimport config from '../../app-config.json'\nimport {KeyboardKey} from '../../types/types';\nimport {getMatchingNote, isAcceptedComputerKey} from '../../Utils';\nimport AudioService from \"../../services/AudioService\";\n\ninterface IProps {\n  audioService: AudioService;\n}\n\ninterface ActiveNotes {\n  [note: string]: boolean;\n}\n\ninterface IState {\n  activeNotes: ActiveNotes | undefined;\n}\n\nclass Keyboard extends React.Component<IProps, IState> {\n\n  public state: IState;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      activeNotes: {}\n    };\n    this.handleComputerKeyPressed = this.handleComputerKeyPressed.bind(this);\n    this.handleComputerKeyReleased = this.handleComputerKeyReleased.bind(this);\n  }\n\n  componentDidMount(): void {\n    window.addEventListener('keydown', this.handleComputerKeyPressed);\n    window.addEventListener('keyup', this.handleComputerKeyReleased);\n  }\n\n  playNote(note: string): void {\n    this.updateActiveNotes(note, true);\n    this.props.audioService.playNote(note);\n  }\n\n  releaseNote(note: string): void {\n    this.updateActiveNotes(note, false);\n    this.props.audioService.releaseNote(note);\n  }\n\n  private handleComputerKeyPressed(event: KeyboardEvent): void {\n    const playedNote = getMatchingNote(event.key);\n    if (isAcceptedComputerKey(event.key) && !this.noteIsActive(playedNote)) {\n      this.playNote(playedNote);\n    }\n  }\n\n  private handleComputerKeyReleased(event: KeyboardEvent): void {\n    if (isAcceptedComputerKey(event.key)) {\n      const releasedNote = getMatchingNote(event.key);\n      this.releaseNote(releasedNote);\n    }\n  }\n\n  private updateActiveNotes(note: string, isActive: boolean) {\n    this.setState({\n      activeNotes: {\n        ...this.state.activeNotes,\n        [note]: isActive,\n      }\n    });\n  }\n\n  noteIsActive(note: string): boolean {\n    return this.state.activeNotes !== undefined && this.state.activeNotes[note];\n  }\n\n  render() {\n    return (\n      <svg>\n        <g id=\"octave-1\">\n        {(config.keyboardKeys as KeyboardKey[])\n          .map(key =>\n            <Key\n              key={`${key.note}1`}\n              note={`${key.note}1`}\n              keyType={key.type}\n              position={key.position}\n              isPressed={this.noteIsActive(`${key.note}1`)}\n              onKeyPressed={(note) => this.playNote(note)}\n              onKeyReleased={(note) => this.releaseNote(note)}\n            />\n          )}\n        </g>\n\n        <g id=\"octave-2\" transform=\"translate(560.000000, 0.000000)\">\n          {(config.keyboardKeys as KeyboardKey[])\n            .map(key =>\n              <Key\n                key={`${key.note}2`}\n                note={`${key.note}2`}\n                keyType={key.type}\n                position={key.position}\n                isPressed={this.noteIsActive(`${key.note}2`)}\n                onKeyPressed={(note) => this.playNote(note)}\n                onKeyReleased={(note) => this.releaseNote(note)}\n              />\n            )}\n        </g>\n      </svg>\n    )\n  }\n}\n\nexport default Keyboard;\n","import React from 'react';\nimport Keyboard from './Keyboard/Keyboard';\nimport {AudioServiceContext} from '../App';\n\nconst Synthesizer: React.FC = () => {\n  return (\n    <svg viewBox=\"0 0 1120 600\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n      <AudioServiceContext.Consumer>\n        {audioService => <Keyboard audioService={audioService}/>}\n      </AudioServiceContext.Consumer>\n    </svg>\n  );\n};\n\nexport default Synthesizer;\n","import React from 'react';\nimport './App.css';\nimport Synthesizer from './components/Synthesizer';\nimport AudioService from './services/AudioService';\n\nconst audioService = new AudioService();\nexport const AudioServiceContext = React.createContext<AudioService>(audioService);\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"app\">\n      <div className=\"synth\">\n        <AudioServiceContext.Provider value={audioService}>\n          <Synthesizer/>\n        </AudioServiceContext.Provider>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import config from '../app-config.json';\nimport {NoteFrequencyMapping} from '../types/types';\n\n\nexport default class AudioService {\n\n  audioContext: AudioContext;\n  noteOscillators: Map<string, OscillatorNode | undefined>; // note => oscillator\n  gain: GainNode;\n  oscillatorWaveType: OscillatorType;\n\n  constructor() {\n    // @ts-ignore\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    this.audioContext = new AudioContext();\n    this.oscillatorWaveType = 'sine'; // TODO: make configurable\n    this.gain = this.audioContext.createGain();\n    this.gain.gain.value = 0.2; // TODO: make configurable\n    this.gain.connect(this.audioContext.destination);\n    this.noteOscillators = new Map<string, OscillatorNode>();\n  }\n\n  playNote(note: string): void {\n    const noteFrequency = (config.noteFrequencyMappings as NoteFrequencyMapping[])\n      .filter(m => m.note === note)[0].frequency;\n\n    if (!noteFrequency) {\n      return;\n    }\n\n    const oscillator = this.audioContext.createOscillator();\n    oscillator.type = this.oscillatorWaveType;\n    oscillator.frequency.value = noteFrequency;\n    oscillator.connect(this.gain);\n    oscillator.start();\n    this.noteOscillators.set(note, oscillator);\n  }\n\n  releaseNote(note: string): void {\n    const oscillator = this.noteOscillators.get(note);\n    if (!oscillator) {\n      return;\n    }\n\n    oscillator.disconnect();\n    this.noteOscillators.set(note, undefined);\n  }\n\n  releaseAllNotes(): void {\n    (config.noteFrequencyMappings as NoteFrequencyMapping[])\n      .forEach(m => this.releaseNote(m.note));\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}